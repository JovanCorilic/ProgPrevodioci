Grammar

    0 $accept: program $end

    1 program: function_list

    2 function_list: function
    3              | function_list function

    4 $@1: %empty

    5 function: _TYPE _ID $@1 _LPAREN parameters _RPAREN body

    6 parameters: parameter
    7           | parameters _COMMA parameter

    8 parameter: %empty
    9          | _TYPE _ID

   10 body: _LBRACKET variable_list statement_list _RBRACKET

   11 variable_list: %empty
   12              | variable_list variable

   13 $@2: %empty

   14 variable: _TYPE $@2 vars _SEMICOLON

   15 vars: _ID
   16     | vars _COMMA _ID

   17 statement_list: %empty
   18               | statement_list statement

   19 statement: compound_statement
   20          | assignment_statement
   21          | if_statement
   22          | return_statement
   23          | postincrement_statement
   24          | while_statement
   25          | loop_statement
   26          | branch_statement

   27 $@3: %empty

   28 branch_statement: _BRANCH _LSQUAREBRACKET _ID _ARROW literal _ARROW literal _ARROW literal _RSQUAREBRACKET $@3 _ONE _ARROW statement _TWO _ARROW statement _THREE _ARROW statement _OTHER _ARROW statement

   29 $@4: %empty

   30 loop_statement: _LOOP _LPAREN _ID _COMMA literal _COMMA literal _COMMA literal _RPAREN $@4 statement

   31 postincrement_statement: _ID _POSTINCREMENT _SEMICOLON

   32 $@5: %empty

   33 compound_statement: _LBRACKET $@5 variable_list statement_list _RBRACKET

   34 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON

   35 num_exp: exp
   36        | num_exp _AROP exp
   37        | num_exp _POSTINCREMENT

   38 exp: literal
   39    | _ID
   40    | function_call
   41    | _LPAREN num_exp _RPAREN

   42 literal: _INT_NUMBER
   43        | _UINT_NUMBER

   44 $@6: %empty

   45 function_call: _ID $@6 _LPAREN argument _RPAREN

   46 argument: %empty
   47         | num_exp
   48         | argument _COMMA num_exp

   49 if_statement: if_part
   50             | if_part _ELSE statement

   51 if_part: _IF _LPAREN logic_rel_exp _RPAREN statement

   52 logic_rel_exp: rel_exp
   53              | logic_rel_exp _LOGICOPER rel_exp

   54 rel_exp: num_exp _RELOP num_exp

   55 while_statement: _WHILE _LPAREN logic_rel_exp _RPAREN statement

   56 return_statement: _RETURN num_exp _SEMICOLON
   57                 | _RETURN _SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    _TYPE <i> (258) 5 9 14
    _IF (259) 51
    _ELSE (260) 50
    _RETURN (261) 56 57
    _ID <s> (262) 5 9 15 16 28 30 31 34 39 45
    _INT_NUMBER <s> (263) 42
    _UINT_NUMBER <s> (264) 43
    _LPAREN (265) 5 30 41 45 51 55
    _RPAREN (266) 5 30 41 45 51 55
    _LBRACKET (267) 10 33
    _RBRACKET (268) 10 33
    _ASSIGN (269) 34
    _SEMICOLON (270) 14 31 34 56 57
    _AROP <i> (271) 36
    _RELOP <i> (272) 54
    _COMMA (273) 7 16 30 48
    _POSTINCREMENT <i> (274) 31 37
    _WHILE (275) 55
    _LOGICOPER (276) 53
    _LOOP (277) 30
    _BRANCH (278) 28
    _LSQUAREBRACKET (279) 28
    _RSQUAREBRACKET (280) 28
    _ARROW (281) 28
    _ONE (282) 28
    _TWO (283) 28
    _THREE (284) 28
    _OTHER (285) 28
    ONLY_IF (286)


Nonterminals, with rules where they appear

    $accept (32)
        on left: 0
    program (33)
        on left: 1
        on right: 0
    function_list (34)
        on left: 2 3
        on right: 1 3
    function (35)
        on left: 5
        on right: 2 3
    $@1 (36)
        on left: 4
        on right: 5
    parameters (37)
        on left: 6 7
        on right: 5 7
    parameter (38)
        on left: 8 9
        on right: 6 7
    body (39)
        on left: 10
        on right: 5
    variable_list (40)
        on left: 11 12
        on right: 10 12 33
    variable (41)
        on left: 14
        on right: 12
    $@2 (42)
        on left: 13
        on right: 14
    vars (43)
        on left: 15 16
        on right: 14 16
    statement_list (44)
        on left: 17 18
        on right: 10 18 33
    statement (45)
        on left: 19 20 21 22 23 24 25 26
        on right: 18 28 30 50 51 55
    branch_statement (46)
        on left: 28
        on right: 26
    $@3 (47)
        on left: 27
        on right: 28
    loop_statement (48)
        on left: 30
        on right: 25
    $@4 (49)
        on left: 29
        on right: 30
    postincrement_statement (50)
        on left: 31
        on right: 23
    compound_statement (51)
        on left: 33
        on right: 19
    $@5 (52)
        on left: 32
        on right: 33
    assignment_statement (53)
        on left: 34
        on right: 20
    num_exp <i> (54)
        on left: 35 36 37
        on right: 34 36 37 41 47 48 54 56
    exp <i> (55)
        on left: 38 39 40 41
        on right: 35 36
    literal <i> (56)
        on left: 42 43
        on right: 28 30 38
    function_call <i> (57)
        on left: 45
        on right: 40
    $@6 (58)
        on left: 44
        on right: 45
    argument <i> (59)
        on left: 46 47 48
        on right: 45 48
    if_statement (60)
        on left: 49 50
        on right: 21
    if_part (61)
        on left: 51
        on right: 49 50
    logic_rel_exp (62)
        on left: 52 53
        on right: 51 53 55
    rel_exp <i> (63)
        on left: 54
        on right: 52 53
    while_statement (64)
        on left: 55
        on right: 24
    return_statement (65)
        on left: 56 57
        on right: 22


State 0

    0 $accept: . program $end

    _TYPE  shift, and go to state 1

    program        go to state 2
    function_list  go to state 3
    function       go to state 4


State 1

    5 function: _TYPE . _ID $@1 _LPAREN parameters _RPAREN body

    _ID  shift, and go to state 5


State 2

    0 $accept: program . $end

    $end  shift, and go to state 6


State 3

    1 program: function_list .
    3 function_list: function_list . function

    _TYPE  shift, and go to state 1

    $default  reduce using rule 1 (program)

    function  go to state 7


State 4

    2 function_list: function .

    $default  reduce using rule 2 (function_list)


State 5

    5 function: _TYPE _ID . $@1 _LPAREN parameters _RPAREN body

    $default  reduce using rule 4 ($@1)

    $@1  go to state 8


State 6

    0 $accept: program $end .

    $default  accept


State 7

    3 function_list: function_list function .

    $default  reduce using rule 3 (function_list)


State 8

    5 function: _TYPE _ID $@1 . _LPAREN parameters _RPAREN body

    _LPAREN  shift, and go to state 9


State 9

    5 function: _TYPE _ID $@1 _LPAREN . parameters _RPAREN body

    _TYPE  shift, and go to state 10

    $default  reduce using rule 8 (parameter)

    parameters  go to state 11
    parameter   go to state 12


State 10

    9 parameter: _TYPE . _ID

    _ID  shift, and go to state 13


State 11

    5 function: _TYPE _ID $@1 _LPAREN parameters . _RPAREN body
    7 parameters: parameters . _COMMA parameter

    _RPAREN  shift, and go to state 14
    _COMMA   shift, and go to state 15


State 12

    6 parameters: parameter .

    $default  reduce using rule 6 (parameters)


State 13

    9 parameter: _TYPE _ID .

    $default  reduce using rule 9 (parameter)


State 14

    5 function: _TYPE _ID $@1 _LPAREN parameters _RPAREN . body

    _LBRACKET  shift, and go to state 16

    body  go to state 17


State 15

    7 parameters: parameters _COMMA . parameter

    _TYPE  shift, and go to state 10

    $default  reduce using rule 8 (parameter)

    parameter  go to state 18


State 16

   10 body: _LBRACKET . variable_list statement_list _RBRACKET

    $default  reduce using rule 11 (variable_list)

    variable_list  go to state 19


State 17

    5 function: _TYPE _ID $@1 _LPAREN parameters _RPAREN body .

    $default  reduce using rule 5 (function)


State 18

    7 parameters: parameters _COMMA parameter .

    $default  reduce using rule 7 (parameters)


State 19

   10 body: _LBRACKET variable_list . statement_list _RBRACKET
   12 variable_list: variable_list . variable

    _TYPE  shift, and go to state 20

    $default  reduce using rule 17 (statement_list)

    variable        go to state 21
    statement_list  go to state 22


State 20

   14 variable: _TYPE . $@2 vars _SEMICOLON

    $default  reduce using rule 13 ($@2)

    $@2  go to state 23


State 21

   12 variable_list: variable_list variable .

    $default  reduce using rule 12 (variable_list)


State 22

   10 body: _LBRACKET variable_list statement_list . _RBRACKET
   18 statement_list: statement_list . statement

    _IF        shift, and go to state 24
    _RETURN    shift, and go to state 25
    _ID        shift, and go to state 26
    _LBRACKET  shift, and go to state 27
    _RBRACKET  shift, and go to state 28
    _WHILE     shift, and go to state 29
    _LOOP      shift, and go to state 30
    _BRANCH    shift, and go to state 31

    statement                go to state 32
    branch_statement         go to state 33
    loop_statement           go to state 34
    postincrement_statement  go to state 35
    compound_statement       go to state 36
    assignment_statement     go to state 37
    if_statement             go to state 38
    if_part                  go to state 39
    while_statement          go to state 40
    return_statement         go to state 41


State 23

   14 variable: _TYPE $@2 . vars _SEMICOLON

    _ID  shift, and go to state 42

    vars  go to state 43


State 24

   51 if_part: _IF . _LPAREN logic_rel_exp _RPAREN statement

    _LPAREN  shift, and go to state 44


State 25

   56 return_statement: _RETURN . num_exp _SEMICOLON
   57                 | _RETURN . _SEMICOLON

    _ID           shift, and go to state 45
    _INT_NUMBER   shift, and go to state 46
    _UINT_NUMBER  shift, and go to state 47
    _LPAREN       shift, and go to state 48
    _SEMICOLON    shift, and go to state 49

    num_exp        go to state 50
    exp            go to state 51
    literal        go to state 52
    function_call  go to state 53


State 26

   31 postincrement_statement: _ID . _POSTINCREMENT _SEMICOLON
   34 assignment_statement: _ID . _ASSIGN num_exp _SEMICOLON

    _ASSIGN         shift, and go to state 54
    _POSTINCREMENT  shift, and go to state 55


State 27

   33 compound_statement: _LBRACKET . $@5 variable_list statement_list _RBRACKET

    $default  reduce using rule 32 ($@5)

    $@5  go to state 56


State 28

   10 body: _LBRACKET variable_list statement_list _RBRACKET .

    $default  reduce using rule 10 (body)


State 29

   55 while_statement: _WHILE . _LPAREN logic_rel_exp _RPAREN statement

    _LPAREN  shift, and go to state 57


State 30

   30 loop_statement: _LOOP . _LPAREN _ID _COMMA literal _COMMA literal _COMMA literal _RPAREN $@4 statement

    _LPAREN  shift, and go to state 58


State 31

   28 branch_statement: _BRANCH . _LSQUAREBRACKET _ID _ARROW literal _ARROW literal _ARROW literal _RSQUAREBRACKET $@3 _ONE _ARROW statement _TWO _ARROW statement _THREE _ARROW statement _OTHER _ARROW statement

    _LSQUAREBRACKET  shift, and go to state 59


State 32

   18 statement_list: statement_list statement .

    $default  reduce using rule 18 (statement_list)


State 33

   26 statement: branch_statement .

    $default  reduce using rule 26 (statement)


State 34

   25 statement: loop_statement .

    $default  reduce using rule 25 (statement)


State 35

   23 statement: postincrement_statement .

    $default  reduce using rule 23 (statement)


State 36

   19 statement: compound_statement .

    $default  reduce using rule 19 (statement)


State 37

   20 statement: assignment_statement .

    $default  reduce using rule 20 (statement)


State 38

   21 statement: if_statement .

    $default  reduce using rule 21 (statement)


State 39

   49 if_statement: if_part .
   50             | if_part . _ELSE statement

    _ELSE  shift, and go to state 60

    $default  reduce using rule 49 (if_statement)


State 40

   24 statement: while_statement .

    $default  reduce using rule 24 (statement)


State 41

   22 statement: return_statement .

    $default  reduce using rule 22 (statement)


State 42

   15 vars: _ID .

    $default  reduce using rule 15 (vars)


State 43

   14 variable: _TYPE $@2 vars . _SEMICOLON
   16 vars: vars . _COMMA _ID

    _SEMICOLON  shift, and go to state 61
    _COMMA      shift, and go to state 62


State 44

   51 if_part: _IF _LPAREN . logic_rel_exp _RPAREN statement

    _ID           shift, and go to state 45
    _INT_NUMBER   shift, and go to state 46
    _UINT_NUMBER  shift, and go to state 47
    _LPAREN       shift, and go to state 48

    num_exp        go to state 63
    exp            go to state 51
    literal        go to state 52
    function_call  go to state 53
    logic_rel_exp  go to state 64
    rel_exp        go to state 65


State 45

   39 exp: _ID .
   45 function_call: _ID . $@6 _LPAREN argument _RPAREN

    _LPAREN   reduce using rule 44 ($@6)
    $default  reduce using rule 39 (exp)

    $@6  go to state 66


State 46

   42 literal: _INT_NUMBER .

    $default  reduce using rule 42 (literal)


State 47

   43 literal: _UINT_NUMBER .

    $default  reduce using rule 43 (literal)


State 48

   41 exp: _LPAREN . num_exp _RPAREN

    _ID           shift, and go to state 45
    _INT_NUMBER   shift, and go to state 46
    _UINT_NUMBER  shift, and go to state 47
    _LPAREN       shift, and go to state 48

    num_exp        go to state 67
    exp            go to state 51
    literal        go to state 52
    function_call  go to state 53


State 49

   57 return_statement: _RETURN _SEMICOLON .

    $default  reduce using rule 57 (return_statement)


State 50

   36 num_exp: num_exp . _AROP exp
   37        | num_exp . _POSTINCREMENT
   56 return_statement: _RETURN num_exp . _SEMICOLON

    _SEMICOLON      shift, and go to state 68
    _AROP           shift, and go to state 69
    _POSTINCREMENT  shift, and go to state 70


State 51

   35 num_exp: exp .

    $default  reduce using rule 35 (num_exp)


State 52

   38 exp: literal .

    $default  reduce using rule 38 (exp)


State 53

   40 exp: function_call .

    $default  reduce using rule 40 (exp)


State 54

   34 assignment_statement: _ID _ASSIGN . num_exp _SEMICOLON

    _ID           shift, and go to state 45
    _INT_NUMBER   shift, and go to state 46
    _UINT_NUMBER  shift, and go to state 47
    _LPAREN       shift, and go to state 48

    num_exp        go to state 71
    exp            go to state 51
    literal        go to state 52
    function_call  go to state 53


State 55

   31 postincrement_statement: _ID _POSTINCREMENT . _SEMICOLON

    _SEMICOLON  shift, and go to state 72


State 56

   33 compound_statement: _LBRACKET $@5 . variable_list statement_list _RBRACKET

    $default  reduce using rule 11 (variable_list)

    variable_list  go to state 73


State 57

   55 while_statement: _WHILE _LPAREN . logic_rel_exp _RPAREN statement

    _ID           shift, and go to state 45
    _INT_NUMBER   shift, and go to state 46
    _UINT_NUMBER  shift, and go to state 47
    _LPAREN       shift, and go to state 48

    num_exp        go to state 63
    exp            go to state 51
    literal        go to state 52
    function_call  go to state 53
    logic_rel_exp  go to state 74
    rel_exp        go to state 65


State 58

   30 loop_statement: _LOOP _LPAREN . _ID _COMMA literal _COMMA literal _COMMA literal _RPAREN $@4 statement

    _ID  shift, and go to state 75


State 59

   28 branch_statement: _BRANCH _LSQUAREBRACKET . _ID _ARROW literal _ARROW literal _ARROW literal _RSQUAREBRACKET $@3 _ONE _ARROW statement _TWO _ARROW statement _THREE _ARROW statement _OTHER _ARROW statement

    _ID  shift, and go to state 76


State 60

   50 if_statement: if_part _ELSE . statement

    _IF        shift, and go to state 24
    _RETURN    shift, and go to state 25
    _ID        shift, and go to state 26
    _LBRACKET  shift, and go to state 27
    _WHILE     shift, and go to state 29
    _LOOP      shift, and go to state 30
    _BRANCH    shift, and go to state 31

    statement                go to state 77
    branch_statement         go to state 33
    loop_statement           go to state 34
    postincrement_statement  go to state 35
    compound_statement       go to state 36
    assignment_statement     go to state 37
    if_statement             go to state 38
    if_part                  go to state 39
    while_statement          go to state 40
    return_statement         go to state 41


State 61

   14 variable: _TYPE $@2 vars _SEMICOLON .

    $default  reduce using rule 14 (variable)


State 62

   16 vars: vars _COMMA . _ID

    _ID  shift, and go to state 78


State 63

   36 num_exp: num_exp . _AROP exp
   37        | num_exp . _POSTINCREMENT
   54 rel_exp: num_exp . _RELOP num_exp

    _AROP           shift, and go to state 69
    _RELOP          shift, and go to state 79
    _POSTINCREMENT  shift, and go to state 70


State 64

   51 if_part: _IF _LPAREN logic_rel_exp . _RPAREN statement
   53 logic_rel_exp: logic_rel_exp . _LOGICOPER rel_exp

    _RPAREN     shift, and go to state 80
    _LOGICOPER  shift, and go to state 81


State 65

   52 logic_rel_exp: rel_exp .

    $default  reduce using rule 52 (logic_rel_exp)


State 66

   45 function_call: _ID $@6 . _LPAREN argument _RPAREN

    _LPAREN  shift, and go to state 82


State 67

   36 num_exp: num_exp . _AROP exp
   37        | num_exp . _POSTINCREMENT
   41 exp: _LPAREN num_exp . _RPAREN

    _RPAREN         shift, and go to state 83
    _AROP           shift, and go to state 69
    _POSTINCREMENT  shift, and go to state 70


State 68

   56 return_statement: _RETURN num_exp _SEMICOLON .

    $default  reduce using rule 56 (return_statement)


State 69

   36 num_exp: num_exp _AROP . exp

    _ID           shift, and go to state 45
    _INT_NUMBER   shift, and go to state 46
    _UINT_NUMBER  shift, and go to state 47
    _LPAREN       shift, and go to state 48

    exp            go to state 84
    literal        go to state 52
    function_call  go to state 53


State 70

   37 num_exp: num_exp _POSTINCREMENT .

    $default  reduce using rule 37 (num_exp)


State 71

   34 assignment_statement: _ID _ASSIGN num_exp . _SEMICOLON
   36 num_exp: num_exp . _AROP exp
   37        | num_exp . _POSTINCREMENT

    _SEMICOLON      shift, and go to state 85
    _AROP           shift, and go to state 69
    _POSTINCREMENT  shift, and go to state 70


State 72

   31 postincrement_statement: _ID _POSTINCREMENT _SEMICOLON .

    $default  reduce using rule 31 (postincrement_statement)


State 73

   12 variable_list: variable_list . variable
   33 compound_statement: _LBRACKET $@5 variable_list . statement_list _RBRACKET

    _TYPE  shift, and go to state 20

    $default  reduce using rule 17 (statement_list)

    variable        go to state 21
    statement_list  go to state 86


State 74

   53 logic_rel_exp: logic_rel_exp . _LOGICOPER rel_exp
   55 while_statement: _WHILE _LPAREN logic_rel_exp . _RPAREN statement

    _RPAREN     shift, and go to state 87
    _LOGICOPER  shift, and go to state 81


State 75

   30 loop_statement: _LOOP _LPAREN _ID . _COMMA literal _COMMA literal _COMMA literal _RPAREN $@4 statement

    _COMMA  shift, and go to state 88


State 76

   28 branch_statement: _BRANCH _LSQUAREBRACKET _ID . _ARROW literal _ARROW literal _ARROW literal _RSQUAREBRACKET $@3 _ONE _ARROW statement _TWO _ARROW statement _THREE _ARROW statement _OTHER _ARROW statement

    _ARROW  shift, and go to state 89


State 77

   50 if_statement: if_part _ELSE statement .

    $default  reduce using rule 50 (if_statement)


State 78

   16 vars: vars _COMMA _ID .

    $default  reduce using rule 16 (vars)


State 79

   54 rel_exp: num_exp _RELOP . num_exp

    _ID           shift, and go to state 45
    _INT_NUMBER   shift, and go to state 46
    _UINT_NUMBER  shift, and go to state 47
    _LPAREN       shift, and go to state 48

    num_exp        go to state 90
    exp            go to state 51
    literal        go to state 52
    function_call  go to state 53


State 80

   51 if_part: _IF _LPAREN logic_rel_exp _RPAREN . statement

    _IF        shift, and go to state 24
    _RETURN    shift, and go to state 25
    _ID        shift, and go to state 26
    _LBRACKET  shift, and go to state 27
    _WHILE     shift, and go to state 29
    _LOOP      shift, and go to state 30
    _BRANCH    shift, and go to state 31

    statement                go to state 91
    branch_statement         go to state 33
    loop_statement           go to state 34
    postincrement_statement  go to state 35
    compound_statement       go to state 36
    assignment_statement     go to state 37
    if_statement             go to state 38
    if_part                  go to state 39
    while_statement          go to state 40
    return_statement         go to state 41


State 81

   53 logic_rel_exp: logic_rel_exp _LOGICOPER . rel_exp

    _ID           shift, and go to state 45
    _INT_NUMBER   shift, and go to state 46
    _UINT_NUMBER  shift, and go to state 47
    _LPAREN       shift, and go to state 48

    num_exp        go to state 63
    exp            go to state 51
    literal        go to state 52
    function_call  go to state 53
    rel_exp        go to state 92


State 82

   45 function_call: _ID $@6 _LPAREN . argument _RPAREN

    _ID           shift, and go to state 45
    _INT_NUMBER   shift, and go to state 46
    _UINT_NUMBER  shift, and go to state 47
    _LPAREN       shift, and go to state 48

    $default  reduce using rule 46 (argument)

    num_exp        go to state 93
    exp            go to state 51
    literal        go to state 52
    function_call  go to state 53
    argument       go to state 94


State 83

   41 exp: _LPAREN num_exp _RPAREN .

    $default  reduce using rule 41 (exp)


State 84

   36 num_exp: num_exp _AROP exp .

    $default  reduce using rule 36 (num_exp)


State 85

   34 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON .

    $default  reduce using rule 34 (assignment_statement)


State 86

   18 statement_list: statement_list . statement
   33 compound_statement: _LBRACKET $@5 variable_list statement_list . _RBRACKET

    _IF        shift, and go to state 24
    _RETURN    shift, and go to state 25
    _ID        shift, and go to state 26
    _LBRACKET  shift, and go to state 27
    _RBRACKET  shift, and go to state 95
    _WHILE     shift, and go to state 29
    _LOOP      shift, and go to state 30
    _BRANCH    shift, and go to state 31

    statement                go to state 32
    branch_statement         go to state 33
    loop_statement           go to state 34
    postincrement_statement  go to state 35
    compound_statement       go to state 36
    assignment_statement     go to state 37
    if_statement             go to state 38
    if_part                  go to state 39
    while_statement          go to state 40
    return_statement         go to state 41


State 87

   55 while_statement: _WHILE _LPAREN logic_rel_exp _RPAREN . statement

    _IF        shift, and go to state 24
    _RETURN    shift, and go to state 25
    _ID        shift, and go to state 26
    _LBRACKET  shift, and go to state 27
    _WHILE     shift, and go to state 29
    _LOOP      shift, and go to state 30
    _BRANCH    shift, and go to state 31

    statement                go to state 96
    branch_statement         go to state 33
    loop_statement           go to state 34
    postincrement_statement  go to state 35
    compound_statement       go to state 36
    assignment_statement     go to state 37
    if_statement             go to state 38
    if_part                  go to state 39
    while_statement          go to state 40
    return_statement         go to state 41


State 88

   30 loop_statement: _LOOP _LPAREN _ID _COMMA . literal _COMMA literal _COMMA literal _RPAREN $@4 statement

    _INT_NUMBER   shift, and go to state 46
    _UINT_NUMBER  shift, and go to state 47

    literal  go to state 97


State 89

   28 branch_statement: _BRANCH _LSQUAREBRACKET _ID _ARROW . literal _ARROW literal _ARROW literal _RSQUAREBRACKET $@3 _ONE _ARROW statement _TWO _ARROW statement _THREE _ARROW statement _OTHER _ARROW statement

    _INT_NUMBER   shift, and go to state 46
    _UINT_NUMBER  shift, and go to state 47

    literal  go to state 98


State 90

   36 num_exp: num_exp . _AROP exp
   37        | num_exp . _POSTINCREMENT
   54 rel_exp: num_exp _RELOP num_exp .

    _AROP           shift, and go to state 69
    _POSTINCREMENT  shift, and go to state 70

    $default  reduce using rule 54 (rel_exp)


State 91

   51 if_part: _IF _LPAREN logic_rel_exp _RPAREN statement .

    $default  reduce using rule 51 (if_part)


State 92

   53 logic_rel_exp: logic_rel_exp _LOGICOPER rel_exp .

    $default  reduce using rule 53 (logic_rel_exp)


State 93

   36 num_exp: num_exp . _AROP exp
   37        | num_exp . _POSTINCREMENT
   47 argument: num_exp .

    _AROP           shift, and go to state 69
    _POSTINCREMENT  shift, and go to state 70

    $default  reduce using rule 47 (argument)


State 94

   45 function_call: _ID $@6 _LPAREN argument . _RPAREN
   48 argument: argument . _COMMA num_exp

    _RPAREN  shift, and go to state 99
    _COMMA   shift, and go to state 100


State 95

   33 compound_statement: _LBRACKET $@5 variable_list statement_list _RBRACKET .

    $default  reduce using rule 33 (compound_statement)


State 96

   55 while_statement: _WHILE _LPAREN logic_rel_exp _RPAREN statement .

    $default  reduce using rule 55 (while_statement)


State 97

   30 loop_statement: _LOOP _LPAREN _ID _COMMA literal . _COMMA literal _COMMA literal _RPAREN $@4 statement

    _COMMA  shift, and go to state 101


State 98

   28 branch_statement: _BRANCH _LSQUAREBRACKET _ID _ARROW literal . _ARROW literal _ARROW literal _RSQUAREBRACKET $@3 _ONE _ARROW statement _TWO _ARROW statement _THREE _ARROW statement _OTHER _ARROW statement

    _ARROW  shift, and go to state 102


State 99

   45 function_call: _ID $@6 _LPAREN argument _RPAREN .

    $default  reduce using rule 45 (function_call)


State 100

   48 argument: argument _COMMA . num_exp

    _ID           shift, and go to state 45
    _INT_NUMBER   shift, and go to state 46
    _UINT_NUMBER  shift, and go to state 47
    _LPAREN       shift, and go to state 48

    num_exp        go to state 103
    exp            go to state 51
    literal        go to state 52
    function_call  go to state 53


State 101

   30 loop_statement: _LOOP _LPAREN _ID _COMMA literal _COMMA . literal _COMMA literal _RPAREN $@4 statement

    _INT_NUMBER   shift, and go to state 46
    _UINT_NUMBER  shift, and go to state 47

    literal  go to state 104


State 102

   28 branch_statement: _BRANCH _LSQUAREBRACKET _ID _ARROW literal _ARROW . literal _ARROW literal _RSQUAREBRACKET $@3 _ONE _ARROW statement _TWO _ARROW statement _THREE _ARROW statement _OTHER _ARROW statement

    _INT_NUMBER   shift, and go to state 46
    _UINT_NUMBER  shift, and go to state 47

    literal  go to state 105


State 103

   36 num_exp: num_exp . _AROP exp
   37        | num_exp . _POSTINCREMENT
   48 argument: argument _COMMA num_exp .

    _AROP           shift, and go to state 69
    _POSTINCREMENT  shift, and go to state 70

    $default  reduce using rule 48 (argument)


State 104

   30 loop_statement: _LOOP _LPAREN _ID _COMMA literal _COMMA literal . _COMMA literal _RPAREN $@4 statement

    _COMMA  shift, and go to state 106


State 105

   28 branch_statement: _BRANCH _LSQUAREBRACKET _ID _ARROW literal _ARROW literal . _ARROW literal _RSQUAREBRACKET $@3 _ONE _ARROW statement _TWO _ARROW statement _THREE _ARROW statement _OTHER _ARROW statement

    _ARROW  shift, and go to state 107


State 106

   30 loop_statement: _LOOP _LPAREN _ID _COMMA literal _COMMA literal _COMMA . literal _RPAREN $@4 statement

    _INT_NUMBER   shift, and go to state 46
    _UINT_NUMBER  shift, and go to state 47

    literal  go to state 108


State 107

   28 branch_statement: _BRANCH _LSQUAREBRACKET _ID _ARROW literal _ARROW literal _ARROW . literal _RSQUAREBRACKET $@3 _ONE _ARROW statement _TWO _ARROW statement _THREE _ARROW statement _OTHER _ARROW statement

    _INT_NUMBER   shift, and go to state 46
    _UINT_NUMBER  shift, and go to state 47

    literal  go to state 109


State 108

   30 loop_statement: _LOOP _LPAREN _ID _COMMA literal _COMMA literal _COMMA literal . _RPAREN $@4 statement

    _RPAREN  shift, and go to state 110


State 109

   28 branch_statement: _BRANCH _LSQUAREBRACKET _ID _ARROW literal _ARROW literal _ARROW literal . _RSQUAREBRACKET $@3 _ONE _ARROW statement _TWO _ARROW statement _THREE _ARROW statement _OTHER _ARROW statement

    _RSQUAREBRACKET  shift, and go to state 111


State 110

   30 loop_statement: _LOOP _LPAREN _ID _COMMA literal _COMMA literal _COMMA literal _RPAREN . $@4 statement

    $default  reduce using rule 29 ($@4)

    $@4  go to state 112


State 111

   28 branch_statement: _BRANCH _LSQUAREBRACKET _ID _ARROW literal _ARROW literal _ARROW literal _RSQUAREBRACKET . $@3 _ONE _ARROW statement _TWO _ARROW statement _THREE _ARROW statement _OTHER _ARROW statement

    $default  reduce using rule 27 ($@3)

    $@3  go to state 113


State 112

   30 loop_statement: _LOOP _LPAREN _ID _COMMA literal _COMMA literal _COMMA literal _RPAREN $@4 . statement

    _IF        shift, and go to state 24
    _RETURN    shift, and go to state 25
    _ID        shift, and go to state 26
    _LBRACKET  shift, and go to state 27
    _WHILE     shift, and go to state 29
    _LOOP      shift, and go to state 30
    _BRANCH    shift, and go to state 31

    statement                go to state 114
    branch_statement         go to state 33
    loop_statement           go to state 34
    postincrement_statement  go to state 35
    compound_statement       go to state 36
    assignment_statement     go to state 37
    if_statement             go to state 38
    if_part                  go to state 39
    while_statement          go to state 40
    return_statement         go to state 41


State 113

   28 branch_statement: _BRANCH _LSQUAREBRACKET _ID _ARROW literal _ARROW literal _ARROW literal _RSQUAREBRACKET $@3 . _ONE _ARROW statement _TWO _ARROW statement _THREE _ARROW statement _OTHER _ARROW statement

    _ONE  shift, and go to state 115


State 114

   30 loop_statement: _LOOP _LPAREN _ID _COMMA literal _COMMA literal _COMMA literal _RPAREN $@4 statement .

    $default  reduce using rule 30 (loop_statement)


State 115

   28 branch_statement: _BRANCH _LSQUAREBRACKET _ID _ARROW literal _ARROW literal _ARROW literal _RSQUAREBRACKET $@3 _ONE . _ARROW statement _TWO _ARROW statement _THREE _ARROW statement _OTHER _ARROW statement

    _ARROW  shift, and go to state 116


State 116

   28 branch_statement: _BRANCH _LSQUAREBRACKET _ID _ARROW literal _ARROW literal _ARROW literal _RSQUAREBRACKET $@3 _ONE _ARROW . statement _TWO _ARROW statement _THREE _ARROW statement _OTHER _ARROW statement

    _IF        shift, and go to state 24
    _RETURN    shift, and go to state 25
    _ID        shift, and go to state 26
    _LBRACKET  shift, and go to state 27
    _WHILE     shift, and go to state 29
    _LOOP      shift, and go to state 30
    _BRANCH    shift, and go to state 31

    statement                go to state 117
    branch_statement         go to state 33
    loop_statement           go to state 34
    postincrement_statement  go to state 35
    compound_statement       go to state 36
    assignment_statement     go to state 37
    if_statement             go to state 38
    if_part                  go to state 39
    while_statement          go to state 40
    return_statement         go to state 41


State 117

   28 branch_statement: _BRANCH _LSQUAREBRACKET _ID _ARROW literal _ARROW literal _ARROW literal _RSQUAREBRACKET $@3 _ONE _ARROW statement . _TWO _ARROW statement _THREE _ARROW statement _OTHER _ARROW statement

    _TWO  shift, and go to state 118


State 118

   28 branch_statement: _BRANCH _LSQUAREBRACKET _ID _ARROW literal _ARROW literal _ARROW literal _RSQUAREBRACKET $@3 _ONE _ARROW statement _TWO . _ARROW statement _THREE _ARROW statement _OTHER _ARROW statement

    _ARROW  shift, and go to state 119


State 119

   28 branch_statement: _BRANCH _LSQUAREBRACKET _ID _ARROW literal _ARROW literal _ARROW literal _RSQUAREBRACKET $@3 _ONE _ARROW statement _TWO _ARROW . statement _THREE _ARROW statement _OTHER _ARROW statement

    _IF        shift, and go to state 24
    _RETURN    shift, and go to state 25
    _ID        shift, and go to state 26
    _LBRACKET  shift, and go to state 27
    _WHILE     shift, and go to state 29
    _LOOP      shift, and go to state 30
    _BRANCH    shift, and go to state 31

    statement                go to state 120
    branch_statement         go to state 33
    loop_statement           go to state 34
    postincrement_statement  go to state 35
    compound_statement       go to state 36
    assignment_statement     go to state 37
    if_statement             go to state 38
    if_part                  go to state 39
    while_statement          go to state 40
    return_statement         go to state 41


State 120

   28 branch_statement: _BRANCH _LSQUAREBRACKET _ID _ARROW literal _ARROW literal _ARROW literal _RSQUAREBRACKET $@3 _ONE _ARROW statement _TWO _ARROW statement . _THREE _ARROW statement _OTHER _ARROW statement

    _THREE  shift, and go to state 121


State 121

   28 branch_statement: _BRANCH _LSQUAREBRACKET _ID _ARROW literal _ARROW literal _ARROW literal _RSQUAREBRACKET $@3 _ONE _ARROW statement _TWO _ARROW statement _THREE . _ARROW statement _OTHER _ARROW statement

    _ARROW  shift, and go to state 122


State 122

   28 branch_statement: _BRANCH _LSQUAREBRACKET _ID _ARROW literal _ARROW literal _ARROW literal _RSQUAREBRACKET $@3 _ONE _ARROW statement _TWO _ARROW statement _THREE _ARROW . statement _OTHER _ARROW statement

    _IF        shift, and go to state 24
    _RETURN    shift, and go to state 25
    _ID        shift, and go to state 26
    _LBRACKET  shift, and go to state 27
    _WHILE     shift, and go to state 29
    _LOOP      shift, and go to state 30
    _BRANCH    shift, and go to state 31

    statement                go to state 123
    branch_statement         go to state 33
    loop_statement           go to state 34
    postincrement_statement  go to state 35
    compound_statement       go to state 36
    assignment_statement     go to state 37
    if_statement             go to state 38
    if_part                  go to state 39
    while_statement          go to state 40
    return_statement         go to state 41


State 123

   28 branch_statement: _BRANCH _LSQUAREBRACKET _ID _ARROW literal _ARROW literal _ARROW literal _RSQUAREBRACKET $@3 _ONE _ARROW statement _TWO _ARROW statement _THREE _ARROW statement . _OTHER _ARROW statement

    _OTHER  shift, and go to state 124


State 124

   28 branch_statement: _BRANCH _LSQUAREBRACKET _ID _ARROW literal _ARROW literal _ARROW literal _RSQUAREBRACKET $@3 _ONE _ARROW statement _TWO _ARROW statement _THREE _ARROW statement _OTHER . _ARROW statement

    _ARROW  shift, and go to state 125


State 125

   28 branch_statement: _BRANCH _LSQUAREBRACKET _ID _ARROW literal _ARROW literal _ARROW literal _RSQUAREBRACKET $@3 _ONE _ARROW statement _TWO _ARROW statement _THREE _ARROW statement _OTHER _ARROW . statement

    _IF        shift, and go to state 24
    _RETURN    shift, and go to state 25
    _ID        shift, and go to state 26
    _LBRACKET  shift, and go to state 27
    _WHILE     shift, and go to state 29
    _LOOP      shift, and go to state 30
    _BRANCH    shift, and go to state 31

    statement                go to state 126
    branch_statement         go to state 33
    loop_statement           go to state 34
    postincrement_statement  go to state 35
    compound_statement       go to state 36
    assignment_statement     go to state 37
    if_statement             go to state 38
    if_part                  go to state 39
    while_statement          go to state 40
    return_statement         go to state 41


State 126

   28 branch_statement: _BRANCH _LSQUAREBRACKET _ID _ARROW literal _ARROW literal _ARROW literal _RSQUAREBRACKET $@3 _ONE _ARROW statement _TWO _ARROW statement _THREE _ARROW statement _OTHER _ARROW statement .

    $default  reduce using rule 28 (branch_statement)
